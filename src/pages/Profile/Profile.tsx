import React, { useState, useEffect, useRef } from "react";
import { useNavigate } from "react-router-dom";
import { Container, Typography } from "@mui/material";
import { useAppSelector, useAppDispatch } from "../../hooks/redux";
import { authService } from "../../services/authService";
import { userService } from "../../services/userService";
import { logoutUser, updateUserData } from "../../reducers/authSlice";
import { ROUTES } from "../../constants/routes";
import { User, UserUpdateData } from "../../types/user";
import { Loader, Modal } from "../../components";
import styles from "./Profile.module.css";

export const Profile: React.FC = () => {
  const dispatch = useAppDispatch();
  const navigate = useNavigate();
  const { user: authUser } = useAppSelector((state) => state.auth);
  const profileFetchedRef = useRef(false);

  const [user, setUser] = useState<User | null>(null);
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [login, setLogin] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");

  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [isSuccessModalOpen, setIsSuccessModalOpen] = useState(false);
  const [successDeleteMessage, setSuccessDeleteMessage] = useState("");
  const [error, setError] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);

  useEffect(() => {
    const fetchUserProfile = async () => {
      try {
        if (profileFetchedRef.current) {
          return;
        }

        setIsLoading(true);
        setError(null);

        if (!authUser) {
          console.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ");
          navigate(ROUTES.LOGIN);
          return;
        }

        if (authUser) {
          let profileData;

          try {
            profileData = await authService.getUserProfile();

            dispatch(updateUserData(profileData));

            if (profileData && profileData.role !== authUser.role) {
              console.warn(
                "–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –†–æ–ª—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è",
                {
                  —Å–µ—Ä–≤–µ—Ä–Ω–∞—è: profileData.role,
                  –ª–æ–∫–∞–ª—å–Ω–∞—è: authUser.role,
                }
              );
            }
          } catch (apiError) {
            console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞:", apiError);

            profileData = authUser;
          }

          const userObj: User = {
            _id:
              profileData?._id ||
              profileData?.id ||
              authUser?._id ||
              authUser?.id ||
              "",
            name: profileData?.name || authUser?.name || "",
            email: profileData?.email || authUser?.email || "",
            login: profileData?.login || authUser?.login || "",
            role: (profileData?.role || authUser?.role) as "user" | "admin",
          };

          setUser(userObj);
          setName(userObj.name || "");
          setEmail(userObj.email || "");
          setLogin(userObj.login || "");

          authService.updateUserData(userObj);

          profileFetchedRef.current = true;
        } else {
          console.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ Redux");
          const savedProfile = authService.loadSavedProfile();

          if (savedProfile) {
            setUser(savedProfile);
            setName(savedProfile.name || "");
            setEmail(savedProfile.email || "");
            setLogin(savedProfile.login || "");

            dispatch(updateUserData(savedProfile));
            profileFetchedRef.current = true;
          } else {
            navigate(ROUTES.LOGIN);
            throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
          }
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è:", error);
        if (error instanceof Error) {
          setError(error.message);
        } else {
          setError("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è");
        }
      } finally {
        setIsLoading(false);
      }
    };

    fetchUserProfile();
  }, [dispatch, navigate]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (password && password !== confirmPassword) {
      setError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
      return;
    }

    try {
      setIsSaving(true);
      setError(null);
      setSuccessMessage(null);

      const userData: UserUpdateData = {
        name,
      };

      if (password) {
        userData.password = password;
      }

      try {
        const updatedUser = await userService.updateUserProfile(userData);

        const userObj: User = {
          _id: updatedUser._id || "",
          name,
          email: updatedUser.email || email,
          login: updatedUser.login || login, 
          role: updatedUser.role as "user" | "admin",
        };

        setUser(userObj);
        dispatch(updateUserData(userObj)); 

        profileFetchedRef.current = true;

        setSuccessMessage("–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω");

        setPassword("");
        setConfirmPassword("");
      } catch (apiError) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ API:", apiError);
        throw apiError;
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
      if (error instanceof Error) {
        setError(error.message);
      } else {
        setError("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è");
      }
    } finally {
      setIsSaving(false);
    }
  };

  const handleDeleteAccount = async () => {
    try {
      setIsLoading(true);
      setError(null);
      setIsDeleteModalOpen(false);

      await userService.deleteCurrentUser();

      profileFetchedRef.current = false;

      setUser(null);
      setName("");
      setEmail("");
      setLogin("");
      setPassword("");
      setConfirmPassword("");

      setSuccessDeleteMessage("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω");
      setIsSuccessModalOpen(true);

      setIsLoading(false);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:", error);

      if (error instanceof Error) {
        setError(error.message);
      } else {
        setError("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞");
      }

      setIsLoading(false);
    }
  };

  if (isLoading) {
    return (
      <Container className={styles.container}>
        <Loader message="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è..." />
      </Container>
    );
  }

  return (
    <Container className={styles.container}>
      <div className={styles.profileCard}>
        <Typography variant="h4" component="h1" className={styles.title}>
          –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        </Typography>

        {error && <div className={styles.error}>{error}</div>}

        {successMessage && (
          <div className={styles.success}>{successMessage}</div>
        )}

        <form onSubmit={handleSubmit} className={styles.form}>
          <div className={styles.formGroup}>
            <label htmlFor="name" className={styles.label}>
              –ò–º—è
            </label>
            <input
              id="name"
              type="text"
              className={styles.input}
              value={name}
              onChange={(e) => setName(e.target.value)}
              required
            />
          </div>

          <div className={styles.formGroup}>
            <label htmlFor="email" className={styles.label}>
              Email{" "}
              <span className={styles.readOnlyLabel}>(–ù–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è)</span>
            </label>
            <div className={styles.readOnlyField}>
              <input
                id="email"
                type="email"
                className={`${styles.input} ${styles.readOnlyInput}`}
                value={email}
                readOnly
                disabled
              />
              <span className={styles.readOnlyIcon}>üîí</span>
            </div>
          </div>

          <div className={styles.formGroup}>
            <label htmlFor="login" className={styles.label}>
              –õ–æ–≥–∏–Ω{" "}
              <span className={styles.readOnlyLabel}>(–ù–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è)</span>
            </label>
            <div className={styles.readOnlyField}>
              <input
                id="login"
                type="text"
                className={`${styles.input} ${styles.readOnlyInput}`}
                value={login}
                readOnly
                disabled
              />
              <span className={styles.readOnlyIcon}>üîí</span>
            </div>
          </div>

          <div className={styles.formGroup}>
            <label htmlFor="password" className={styles.label}>
              –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å)
            </label>
            <input
              id="password"
              type="password"
              className={styles.input}
              value={password}
              onChange={(e) => setPassword(e.target.value)}
            />
          </div>

          <div className={styles.formGroup}>
            <label htmlFor="confirmPassword" className={styles.label}>
              –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
            </label>
            <input
              id="confirmPassword"
              type="password"
              className={styles.input}
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              disabled={!password}
            />
          </div>

          <div className={styles.formActions}>
            <button
              type="submit"
              className={styles.saveButton}
              disabled={isSaving}
            >
              {isSaving ? "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ..." : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"}
            </button>

            <button
              type="button"
              className={styles.deleteButton}
              onClick={() => setIsDeleteModalOpen(true)}
            >
              –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
            </button>
          </div>
        </form>
      </div>

      <Modal
        isOpen={isDeleteModalOpen}
        onClose={() => setIsDeleteModalOpen(false)}
        title="–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞"
        type="delete"
        onConfirm={handleDeleteAccount}
        onCancel={() => setIsDeleteModalOpen(false)}
        confirmText="–£–¥–∞–ª–∏—Ç—å"
      >
        <p>–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç?</p>
        <p>
          –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å, –∏ –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.
        </p>
      </Modal>

      <Modal
        isOpen={isSuccessModalOpen}
        onClose={() => {
          setIsSuccessModalOpen(false);
          dispatch(logoutUser());
          navigate(ROUTES.LOGIN);
        }}
        title="–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
        type="success"
        onConfirm={() => {
          setIsSuccessModalOpen(false);
          dispatch(logoutUser());
          navigate(ROUTES.LOGIN);
        }}
        confirmText="OK"
      >
        <p>{successDeleteMessage}</p>
      </Modal>
    </Container>
  );
};

